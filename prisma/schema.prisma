// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  MEDICO
  ENFERMERA
  PACIENTE
  ADMINISTRADOR
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

// ============================================
// MODELOS DE COLECCIONES
// ============================================

// Modelo de Departamento
model Department {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String         @unique
  description  String?
  especialties Especialty[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Modelo de Especialidad
model Especialty {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String       @unique
  description     String?
  departmentId  String       @db.ObjectId
  department    Department @relation(fields: [departmentId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// Tipo compuesto para datos específicos de Médicos
type DatosMedico {
  especialtyId String @db.ObjectId
  license_number String
}

// Tipo compuesto para datos específicos de Enfermeras
type DatosEnfermera {
  departmentId String @db.ObjectId
}

// Tipo compuesto para datos específicos de Pacientes (opcional, para futuras expansiones)
type DatosPaciente {
  gender         String
  address        String?
}

// Tipo compuesto para datos específicos de Administradores (opcional, para futuras expansiones)
type DatosAdministrador {
  nivelAcceso      String?
  departamentoAsignado String?
}

// ============================================
// MODELO PRINCIPAL DE USUARIO
// ============================================

model Users {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  email                   String              @unique
  current_password        String
  fullname                String
  documentNumber String   @unique
  role                    Role                @default(PACIENTE)
  date_of_birth           DateTime
  age                     Int
  phone                   String?
  gender                  String?
  status                  UserStatus          @default(PENDING)
  verificationCode        String?
  verificationCodeExpires DateTime?
  
  // Campos embebidos según el rol (solo uno estará presente según el rol)
  medico                  DatosMedico?
  enfermera               DatosEnfermera?
  paciente                DatosPaciente?
  administrador           DatosAdministrador?
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}